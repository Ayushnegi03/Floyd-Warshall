//The Floyd Warshall Algorithm is for solving the All Pairs Shortest Path problem.
//The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph. 
#include <iostream>
using namespace std;
#define V 4
#define INF 9999
void printSolution(int dist[][V]);
void floydWarshall(int graph[][V])
{
    int dist[V][V], i, j, k;
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    for (k = 0; k < V; k++) 
    {
        for (i = 0; i < V; i++) 
        {
            for (j = 0; j < V; j++) 
            {
                if (dist[i][j] > (dist[i][k] + dist[k][j])
                    && (dist[k][j] != INF
                        && dist[i][k] != INF))
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    printSolution(dist);
}
void printSolution(int dist[][V])
{
    cout << "Showing the Shortest Distances between every pair of vertices: \n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                cout << "INF"<< "     ";
            else
                cout << dist[i][j] << "     ";
        }
        cout << endl;
    }
}
int main()
{
    int graph[V][V] = { { 0, INF, -2, INF },
                        { 4, 0, 3, INF },
                        { INF, INF, 0, 2 },
                        { INF, -1, INF, 0} };
    floydWarshall(graph);
    return 0;
}
//Output-
//Showing the Shortest Distances between every pair of vertices:
//0    -1     -2    0
//4     0      2    4
//5     1      0    2
//3     -1     1    0
